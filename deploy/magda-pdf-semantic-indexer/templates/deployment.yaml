apiVersion: apps/v1
kind: Deployment
metadata:
  name: pdf-semantic-indexer
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxUnavailable: {{ .Values.global.rollingUpdate.maxUnavailable | default 0 }}
  selector:
    matchLabels:
      service: pdf-semantic-indexer
  template:
    metadata:
      labels:
        service: pdf-semantic-indexer
    spec:
      {{- include "magda.imagePullSecrets" . | indent 6 }}
      containers:
      - name: pdf-semantic-indexer
        image: {{ include "magda.image" . | quote }}
        imagePullPolicy: {{ include "magda.imagePullPolicy" . | quote }}
        command: [
            "node",
            "/usr/src/app/component/dist/index.js",
            "--semanticIndexerConfig", "/etc/config/semantic-indexer.json",
            "--minioConfig", "/etc/config/minio.json",
            "--opensearchApiURL", "{{ .Values.opensearchURL }}",
            "--embeddingApiURL", "{{ .Values.embeddingApiURL }}"
        ]
{{- if .Values.global.enableLivenessProbes }}
        livenessProbe:
          httpGet:
            path: "/healthz"
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 10
{{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        env:
        - name: NODE_PORT
          value: "80"
        - name: REGISTRY_URL
          value: "http://registry-api/v0"
        - name: ENABLE_MULTI_TENANTS
{{- if .Values.global.enableMultiTenants }}
          value: "true"
{{- else }}
          value: "false"
{{- end }}
        - name: TENANT_URL
          value: "http://tenant-api/v0"
        - name: USER_ID
          value: {{ .Values.global.defaultAdminUserId | default .Values.defaultAdminUserId }}
        - name: INTERNAL_URL
          value: "http://pdf-semantic-indexer"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: auth-secrets
              key: jwt-secret
        - name: MINIO_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: storage-secrets
              key: secretkey
        - name: MINIO_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: storage-secrets
              key: accesskey
        volumeMounts:
        - name: "{{ .Chart.Name }}-config"
          mountPath: "/etc/config"
          readOnly: true
      volumes:
      - name: "{{ .Chart.Name }}-config"
        configMap:
          name: "{{ .Chart.Name }}-config"